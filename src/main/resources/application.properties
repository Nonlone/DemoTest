server.port = 9090
server.servlet.context-path = /test

logging.file = /data/java/order/log-center/test.log
logging.level.org.springframework = info
logging.level.per.nonlone = debug



testa.url = jdbc:mysql://127.0.0.1:3307/test1?useUnicode=true&characterEncoding=utf8&serverTimezone=CTT&zeroDateTimeBehavior=convertToNull&autoReconnect=true
testa.username = root
testa.password = 123456

testb.url = jdbc:mysql://127.0.0.1:3307/test2?useUnicode=true&characterEncoding=utf8&serverTimezone=CTT&zeroDateTimeBehavior=convertToNull&autoReconnect=true
testb.username = root
testb.password = 123456


# MySQL 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
mysql.driver = com.mysql.cj.jdbc.Driver
# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
mysql.initialSize = 1
# 最小连接池数量
mysql.minIdle = 1
# 最大连接池数量
mysql.maxActive = 20
# 配置获取连接等待超时的时间
mysql.maxWait = 60000
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
mysql.poolPreparedStatements = false
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
mysql.maxPoolPreparedStatementPerConnectionSize = 0
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
mysql.timeBetweenEvictionRunsMillis = 5000
# 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
myqsl.keepAlive = true
# 配置一个连接在池中最小生存的时间，单位是毫秒
mysql.minEvictableIdleTimeMillis = 10000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
mysql.validationQuery = 'SELECT 1'
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
mysql.testWhileIdle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
mysql.testOnBorrow = false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
mysql.testOnReturn = false

mysql.removeAbandoned=false

mysql.logAbandoned=false

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
mysql.filters = stat,wall,slf4j


#管理页面帐号和密码
druid.admin = admin
druid.password = admin
